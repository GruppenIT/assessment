"""
Utilit√°rio para gera√ß√£o de PDFs do sistema de assessment
"""

import os
import tempfile
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.colors import Color, HexColor
from reportlab.lib.units import inch, mm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, KeepTogether, Image
from reportlab.platypus.frames import Frame
from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.graphics.shapes import Drawing, Rect, String
from reportlab.graphics import renderPDF
from models.assessment_version import AssessmentDominio
from models.dominio import Dominio
from models.pergunta import Pergunta
from models.resposta import Resposta
from app import db
from sqlalchemy import func
from flask import current_app

def gerar_relatorio_markdown(projeto):
    """
    Gera um relat√≥rio em formato Markdown com a mesma estrutura das estat√≠sticas
    """
    # Criar arquivo tempor√°rio
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.md', mode='w', encoding='utf-8')
    temp_filename = temp_file.name
    
    # Buscar dados das estat√≠sticas (replicando a l√≥gica da view)
    estatisticas_data = []
    
    for projeto_assessment in projeto.assessments:
        if not projeto_assessment.finalizado:
            continue
            
        # Determinar tipo e vers√£o do assessment
        tipo = None
        versao = None
        
        if projeto_assessment.versao_assessment_id:
            versao = projeto_assessment.versao_assessment
            tipo = versao.tipo
            dominios_query = AssessmentDominio.query.filter_by(versao_id=versao.id, ativo=True)
        elif projeto_assessment.tipo_assessment_id:
            tipo = projeto_assessment.tipo_assessment
            dominios_query = Dominio.query.filter_by(tipo_assessment_id=tipo.id, ativo=True)
        
        if not tipo:
            continue
        
        # Processar dom√≠nios
        for dominio in dominios_query.order_by('ordem'):
            # Buscar perguntas do dom√≠nio
            if versao:
                perguntas_dominio = Pergunta.query.filter_by(
                    dominio_versao_id=dominio.id,
                    ativo=True
                ).order_by(Pergunta.ordem).all()
            else:
                perguntas_dominio = Pergunta.query.filter_by(
                    dominio_id=dominio.id,
                    ativo=True
                ).order_by(Pergunta.ordem).all()
            
            respostas_dominio = []
            for pergunta in perguntas_dominio:
                # Buscar resposta mais recente desta pergunta no projeto
                resposta = Resposta.query.filter_by(
                    projeto_id=projeto.id,
                    pergunta_id=pergunta.id
                ).order_by(Resposta.data_resposta.desc()).first()
                
                if resposta:
                    respostas_dominio.append({
                        'pergunta': pergunta,
                        'resposta_final': resposta
                    })
            
            if respostas_dominio:
                estatisticas_data.append({
                    'dominio': dominio,
                    'tipo': tipo,
                    'respostas': respostas_dominio
                })
    
    # Gerar conte√∫do Markdown
    markdown_content = f"""# üìä RELAT√ìRIO DE ESTAT√çSTICAS

## Informa√ß√µes do Projeto

**üìÅ Projeto:** {projeto.nome}  
**üè¢ Cliente:** {projeto.cliente.nome}  
**üìÖ Data de Gera√ß√£o:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}  
**üéØ Status:** Finalizado  

---

# üìù MEMORIAL DE RESPOSTAS E COMENT√ÅRIOS

"""
    
    for dominio_data in estatisticas_data:
        # T√≠tulo do dom√≠nio
        markdown_content += f"\n## üîí {dominio_data['dominio'].nome}\n\n"
        
        for resposta_data in dominio_data['respostas']:
            pergunta = resposta_data['pergunta']
            resposta = resposta_data['resposta_final']
            
            # Determinar n√≠vel de maturidade e emoji
            nota = resposta.nota
            if nota == 0:
                nivel = "Inexistente"
                emoji_nivel = "üî¥"
            elif nota == 1:
                nivel = "Inicial"
                emoji_nivel = "‚ö™"
            elif nota == 2:
                nivel = "B√°sico"
                emoji_nivel = "üü°"
            elif nota == 3:
                nivel = "Intermedi√°rio"
                emoji_nivel = "üîµ"
            elif nota == 4:
                nivel = "Avan√ßado"
                emoji_nivel = "üü¢"
            else:  # nota == 5
                nivel = "Otimizado"
                emoji_nivel = "üü¢"
            
            # Container para cada resposta
            markdown_content += f"""
### üìã Pergunta #{pergunta.ordem}

> **‚ùì PERGUNTA**  
> **{pergunta.texto}**

"""
            
            if pergunta.descricao:
                markdown_content += f"> *{pergunta.descricao}*\n\n"
            
            # Se√ß√£o de Resposta
            respondente_nome = resposta.respondente.nome if resposta.respondente else 'Sistema'
            data_resposta = resposta.data_resposta.strftime('%d/%m/%Y √†s %H:%M')
            
            markdown_content += f"""
> **üìä RESPOSTA**  
> **Pontua√ß√£o:** {emoji_nivel} **{nota}/5 - {nivel}**  
> **üë§ Respondente:** {respondente_nome}  
> **üïí Data:** {data_resposta}  

"""
            
            if resposta.comentario:
                markdown_content += f"""
> **üí¨ Coment√°rio do Respondente:**  
> *"{resposta.comentario}"*

"""
            
            # Se√ß√£o de Feedback T√©cnico
            if pergunta.referencia or pergunta.recomendacao:
                markdown_content += f"\n> **üéì FEEDBACK T√âCNICO**\n\n"
                
                if pergunta.referencia:
                    markdown_content += f"""
> **üìö Refer√™ncia Te√≥rica:**  
> {pergunta.referencia}

"""
                
                if pergunta.recomendacao:
                    markdown_content += f"""
> **üí° Recomenda√ß√£o:**  
> {pergunta.recomendacao}

"""
            
            markdown_content += "\n---\n"
    
    # Adicionar legenda de n√≠veis
    markdown_content += f"""

## üìà LEGENDA - N√çVEIS DE MATURIDADE

| Faixa | N√≠vel | Emoji | Descri√ß√£o |
|-------|-------|-------|-----------|
| 0.0 | Inexistente | üî¥ | Nenhum controle implementado |
| 1.0 | Inicial | ‚ö™ | Pr√°ticas informais e n√£o documentadas |
| 2.0 | B√°sico | üü° | Controles definidos, aplica√ß√£o inconsistente |
| 3.0 | Intermedi√°rio | üîµ | Controles padronizados e repet√≠veis |
| 4.0 | Avan√ßado | üü¢ | Controles monitorados com m√©tricas |
| 5.0 | Otimizado | üü¢ | Controles integrados e melhorados continuamente |

---

**üìÑ Relat√≥rio gerado automaticamente pelo Sistema de Avalia√ß√µes de Maturidade**  
**‚è∞ {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}**

"""
    
    # Escrever no arquivo
    temp_file.write(markdown_content)
    temp_file.close()
    
    return temp_filename

def gerar_relatorio_estatisticas_visual(projeto):
    """
    Gera um relat√≥rio PDF com a mesma identidade visual das estat√≠sticas da web
    """
    # Criar arquivo tempor√°rio
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    temp_filename = temp_file.name
    temp_file.close()
    
    # Criar documento
    doc = SimpleDocTemplate(
        temp_filename,
        pagesize=A4,
        rightMargin=50, leftMargin=50,
        topMargin=50, bottomMargin=50
    )
    
    # Cores principais (replicando as cores do CSS)
    COR_AZUL = HexColor('#0d6efd')
    COR_VERDE = HexColor('#198754')
    COR_CIANO = HexColor('#0dcaf0')
    COR_AMARELO = HexColor('#ffc107')
    COR_FUNDO_AZUL = HexColor('#f0f7ff')
    COR_FUNDO_VERDE = HexColor('#f0f8f5')
    COR_FUNDO_CIANO = HexColor('#f0fdff')
    
    # Estilos personalizados
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=30,
        textColor=HexColor('#2c3e50'),
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    badge_style = ParagraphStyle(
        'BadgeStyle',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.white,
        alignment=TA_LEFT,
        fontName='Helvetica-Bold',
        leftIndent=10,
        rightIndent=10,
        spaceBefore=5,
        spaceAfter=5
    )
    
    pergunta_style = ParagraphStyle(
        'PerguntaStyle',
        parent=styles['Normal'],
        fontSize=11,
        textColor=colors.black,
        alignment=TA_LEFT,
        fontName='Helvetica-Bold',
        leftIndent=15,
        rightIndent=15,
        spaceBefore=5,
        spaceAfter=5
    )
    
    descricao_style = ParagraphStyle(
        'DescricaoStyle',
        parent=styles['Normal'],
        fontSize=9,
        textColor=HexColor('#6c757d'),
        alignment=TA_LEFT,
        leftIndent=15,
        rightIndent=15,
        spaceBefore=2,
        spaceAfter=8
    )
    
    info_style = ParagraphStyle(
        'InfoStyle',
        parent=styles['Normal'],
        fontSize=9,
        textColor=HexColor('#6c757d'),
        alignment=TA_LEFT,
        leftIndent=15,
        rightIndent=15,
        spaceBefore=3,
        spaceAfter=3
    )
    
    comentario_style = ParagraphStyle(
        'ComentarioStyle',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.black,
        alignment=TA_LEFT,
        leftIndent=20,
        rightIndent=20,
        spaceBefore=5,
        spaceAfter=5
    )
    
    tecnico_style = ParagraphStyle(
        'TecnicoStyle',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.black,
        alignment=TA_LEFT,
        leftIndent=20,
        rightIndent=20,
        spaceBefore=3,
        spaceAfter=8
    )
    
    # Fun√ß√£o auxiliar para criar caixas coloridas
    def criar_secao_colorida(elementos, cor_badge, cor_fundo, largura=None):
        if largura is None:
            largura = 500
        
        # Tabela para simular fundo colorido
        data = [[elem] for elem in elementos]
        table = Table(data, colWidths=[largura])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), cor_fundo),
            ('LEFTPADDING', (0, 0), (-1, -1), 15),
            ('RIGHTPADDING', (0, 0), (-1, -1), 15),
            ('TOPPADDING', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 10),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('BOX', (0, 0), (-1, -1), 3, cor_badge),
        ]))
        return table
    
    # Elementos do documento
    story = []
    
    # Cabe√ßalho
    story.append(Paragraph("RELAT√ìRIO DE ESTAT√çSTICAS", title_style))
    story.append(Spacer(1, 15))
    
    # Barra de logos das empresas
    try:
        # Usar caminho absoluto baseado no root_path da aplica√ß√£o
        base_path = current_app.root_path if current_app else os.path.dirname(os.path.dirname(__file__))
        logos_paths = [
            os.path.join(base_path, 'static', 'img', 'gruppen.png'),
            os.path.join(base_path, 'static', 'img', 'zerobox.png'),
            os.path.join(base_path, 'static', 'img', 'firewall365.png'),
            os.path.join(base_path, 'static', 'img', 'gsecdo.png')
        ]
        
        logos_images = []
        for logo_path in logos_paths:
            if os.path.exists(logo_path):
                img = Image(logo_path, width=80, height=25, kind='proportional')
                logos_images.append(img)
        
        if logos_images:
            # Criar tabela com logos em fundo preto
            logo_table = Table([logos_images], colWidths=[100, 100, 100, 100])
            logo_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('LEFTPADDING', (0, 0), (-1, -1), 10),
                ('RIGHTPADDING', (0, 0), (-1, -1), 10),
                ('TOPPADDING', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ]))
            story.append(logo_table)
            story.append(Spacer(1, 20))
    except Exception as e:
        # Se falhar ao carregar logos, continua sem eles
        pass
    
    story.append(Paragraph(f"<b>Projeto:</b> {projeto.nome}", pergunta_style))
    story.append(Paragraph(f"<b>Cliente:</b> {projeto.cliente.nome}", info_style))
    story.append(Paragraph(f"<b>Data de Gera√ß√£o:</b> {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", info_style))
    story.append(Spacer(1, 30))
    
    # Buscar dados das estat√≠sticas (replicando a l√≥gica da view)
    estatisticas_data = []
    
    for projeto_assessment in projeto.assessments:
        if not projeto_assessment.finalizado:
            continue
            
        # Determinar tipo e vers√£o do assessment
        tipo = None
        versao = None
        
        if projeto_assessment.versao_assessment_id:
            versao = projeto_assessment.versao_assessment
            tipo = versao.tipo
            dominios_query = AssessmentDominio.query.filter_by(versao_id=versao.id, ativo=True)
        elif projeto_assessment.tipo_assessment_id:
            tipo = projeto_assessment.tipo_assessment
            dominios_query = Dominio.query.filter_by(tipo_assessment_id=tipo.id, ativo=True)
        
        if not tipo:
            continue
        
        # Processar dom√≠nios
        for dominio in dominios_query.order_by('ordem'):
            # Buscar perguntas do dom√≠nio
            if versao:
                perguntas_dominio = Pergunta.query.filter_by(
                    dominio_versao_id=dominio.id,
                    ativo=True
                ).order_by(Pergunta.ordem).all()
            else:
                perguntas_dominio = Pergunta.query.filter_by(
                    dominio_id=dominio.id,
                    ativo=True
                ).order_by(Pergunta.ordem).all()
            
            respostas_dominio = []
            for pergunta in perguntas_dominio:
                # Buscar resposta mais recente desta pergunta no projeto
                resposta = Resposta.query.filter_by(
                    projeto_id=projeto.id,
                    pergunta_id=pergunta.id
                ).order_by(Resposta.data_resposta.desc()).first()
                
                if resposta:
                    respostas_dominio.append({
                        'pergunta': pergunta,
                        'resposta_final': resposta
                    })
            
            if respostas_dominio:
                estatisticas_data.append({
                    'dominio': dominio,
                    'tipo': tipo,
                    'respostas': respostas_dominio
                })
    
    # Gerar memorial de respostas com estrutura visual id√™ntica
    story.append(Paragraph("MEMORIAL DE RESPOSTAS E COMENT√ÅRIOS", title_style))
    story.append(Spacer(1, 20))
    
    for dominio_data in estatisticas_data:
        # T√≠tulo do dom√≠nio
        story.append(Paragraph(f"<b>{dominio_data['dominio'].nome}</b>", pergunta_style))
        story.append(Spacer(1, 10))
        
        for resposta_data in dominio_data['respostas']:
            pergunta = resposta_data['pergunta']
            resposta = resposta_data['resposta_final']
            
            # Container para cada resposta (simulando o card)
            elementos_resposta = []
            
            # SE√á√ÉO 1: PERGUNTA (azul)
            elementos_pergunta = []
            elementos_pergunta.append(Paragraph("üîµ PERGUNTA", badge_style))
            elementos_pergunta.append(Paragraph(pergunta.texto, pergunta_style))
            if pergunta.descricao:
                elementos_pergunta.append(Paragraph(pergunta.descricao, descricao_style))
            
            secao_pergunta = criar_secao_colorida(elementos_pergunta, COR_AZUL, COR_FUNDO_AZUL)
            story.append(secao_pergunta)
            story.append(Spacer(1, 2))
            
            # SE√á√ÉO 2: RESPOSTA (verde)
            elementos_resposta = []
            
            # Determinar n√≠vel de maturidade
            nota = resposta.nota
            if nota == 0:
                nivel = "Inexistente"
                cor_badge_nota = colors.red
            elif nota == 1:
                nivel = "Inicial"
                cor_badge_nota = colors.grey
            elif nota == 2:
                nivel = "B√°sico"
                cor_badge_nota = colors.orange
            elif nota == 3:
                nivel = "Intermedi√°rio"
                cor_badge_nota = colors.blue
            elif nota == 4:
                nivel = "Avan√ßado"
                cor_badge_nota = colors.green
            else:  # nota == 5
                nivel = "Otimizado"
                cor_badge_nota = colors.darkgreen
            
            elementos_resposta.append(Paragraph(f"üü¢ RESPOSTA - <b>{nota} - {nivel}</b>", badge_style))
            
            respondente_nome = resposta.respondente.nome if resposta.respondente else 'Sistema'
            data_resposta = resposta.data_resposta.strftime('%d/%m/%Y √†s %H:%M')
            elementos_resposta.append(Paragraph(f"<b>üë§ Respondente:</b> {respondente_nome}", info_style))
            elementos_resposta.append(Paragraph(f"<b>üïí Data:</b> {data_resposta}", info_style))
            
            if resposta.comentario:
                elementos_resposta.append(Spacer(1, 5))
                elementos_resposta.append(Paragraph("<b>üí¨ Coment√°rio do respondente:</b>", info_style))
                elementos_resposta.append(Paragraph(resposta.comentario, comentario_style))
            
            secao_resposta = criar_secao_colorida(elementos_resposta, COR_VERDE, COR_FUNDO_VERDE)
            story.append(secao_resposta)
            story.append(Spacer(1, 2))
            
            # SE√á√ÉO 3: FEEDBACK T√âCNICO (ciano) - apenas se houver refer√™ncia ou recomenda√ß√£o
            if pergunta.referencia or pergunta.recomendacao:
                elementos_feedback = []
                elementos_feedback.append(Paragraph("üîµ FEEDBACK T√âCNICO", badge_style))
                
                if pergunta.referencia:
                    elementos_feedback.append(Paragraph("<b>üìö REFER√äNCIA TE√ìRICA:</b>", info_style))
                    elementos_feedback.append(Paragraph(pergunta.referencia, tecnico_style))
                
                if pergunta.recomendacao:
                    if pergunta.referencia:
                        elementos_feedback.append(Spacer(1, 5))
                    elementos_feedback.append(Paragraph("<b>üí° RECOMENDA√á√ÉO:</b>", info_style))
                    elementos_feedback.append(Paragraph(pergunta.recomendacao, tecnico_style))
                
                secao_feedback = criar_secao_colorida(elementos_feedback, COR_CIANO, COR_FUNDO_CIANO)
                story.append(secao_feedback)
            
            story.append(Spacer(1, 20))
    
    # Construir documento
    doc.build(story)
    
    return temp_filename

def gerar_relatorio_estatisticas(projeto):
    """
    Gera um relat√≥rio PDF completo das estat√≠sticas do projeto
    """
    # Criar arquivo tempor√°rio
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    temp_filename = temp_file.name
    temp_file.close()
    
    # Criar documento
    doc = SimpleDocTemplate(
        temp_filename,
        pagesize=A4,
        rightMargin=72, leftMargin=72,
        topMargin=72, bottomMargin=18
    )
    
    # Estilos
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        textColor=HexColor('#2c3e50'),
        alignment=TA_CENTER
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceBefore=20,
        spaceAfter=10,
        textColor=HexColor('#34495e'),
        alignment=TA_LEFT
    )
    
    subheading_style = ParagraphStyle(
        'CustomSubHeading',
        parent=styles['Heading3'],
        fontSize=12,
        spaceBefore=15,
        spaceAfter=8,
        textColor=HexColor('#7f8c8d'),
        alignment=TA_LEFT
    )
    
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=6,
        alignment=TA_LEFT
    )
    
    # Elementos do documento
    story = []
    
    # Cabe√ßalho
    story.append(Paragraph("RELAT√ìRIO DE ESTAT√çSTICAS", title_style))
    story.append(Paragraph(f"Projeto: {projeto.nome}", heading_style))
    story.append(Paragraph(f"Cliente: {projeto.cliente.nome}", normal_style))
    story.append(Paragraph(f"Data de Gera√ß√£o: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", normal_style))
    story.append(Spacer(1, 20))
    
    # Verificar se projeto est√° finalizado
    finalizados, total_assessments = projeto.get_assessments_finalizados()
    
    if not projeto.is_totalmente_finalizado():
        story.append(Paragraph("ATEN√á√ÉO: Este projeto ainda n√£o est√° totalmente finalizado.", normal_style))
        story.append(Spacer(1, 20))
    
    # Estat√≠sticas gerais
    story.append(Paragraph("RESUMO EXECUTIVO", heading_style))
    
    # Calcular score m√©dio geral
    scores_gerais = []
    estatisticas_assessments = []
    
    for projeto_assessment in projeto.assessments:
        if not projeto_assessment.finalizado:
            continue
            
        # Determinar tipo e vers√£o do assessment
        tipo = None
        versao_info = "Sistema Antigo"
        
        if projeto_assessment.versao_assessment_id:
            versao = projeto_assessment.versao_assessment
            tipo = versao.tipo
            versao_info = f"Vers√£o {versao.versao}"
        elif projeto_assessment.tipo_assessment_id:
            tipo = projeto_assessment.tipo_assessment
            versao_info = "Sistema Antigo"
        
        if not tipo:
            continue
        
        # Calcular score geral do assessment
        if projeto_assessment.versao_assessment_id:
            score_query = db.session.query(
                func.avg(Resposta.nota).label('score_medio'),
                func.count(Resposta.id).label('total_respostas')
            ).join(
                Pergunta, Resposta.pergunta_id == Pergunta.id
            ).join(
                AssessmentDominio, Pergunta.dominio_versao_id == AssessmentDominio.id
            ).filter(
                Resposta.projeto_id == projeto.id,
                AssessmentDominio.versao_id == versao.id,
                AssessmentDominio.ativo == True,
                Pergunta.ativo == True
            ).first()
        else:
            score_query = db.session.query(
                func.avg(Resposta.nota).label('score_medio'),
                func.count(Resposta.id).label('total_respostas')
            ).join(
                Pergunta, Resposta.pergunta_id == Pergunta.id
            ).join(
                Dominio, Pergunta.dominio_id == Dominio.id
            ).filter(
                Resposta.projeto_id == projeto.id,
                Dominio.tipo_assessment_id == tipo.id,
                Dominio.ativo == True,
                Pergunta.ativo == True
            ).first()
        
        score_geral = round(float(score_query.score_medio or 0), 2)
        total_respostas = score_query.total_respostas or 0
        
        scores_gerais.append(score_geral)
        estatisticas_assessments.append({
            'tipo': tipo,
            'versao_info': versao_info,
            'score_geral': score_geral,
            'total_respostas': total_respostas,
            'data_finalizacao': projeto_assessment.data_finalizacao
        })
    
    score_medio_projeto = round(sum(scores_gerais) / len(scores_gerais) if scores_gerais else 0, 2)
    
    # Tabela de resumo
    resumo_data = [
        ['M√©trica', 'Valor'],
        ['Score M√©dio Geral', f'{score_medio_projeto}/5.0'],
        ['Total de Assessments', str(len(estatisticas_assessments))],
        ['Total de Respondentes', str(len(projeto.get_respondentes_ativos()))],
        ['Data de Cria√ß√£o', projeto.data_criacao.strftime('%d/%m/%Y')],
    ]
    
    # Encontrar data de finaliza√ß√£o mais recente
    data_finalizacao = None
    for assessment in estatisticas_assessments:
        if assessment['data_finalizacao']:
            if not data_finalizacao or assessment['data_finalizacao'] > data_finalizacao:
                data_finalizacao = assessment['data_finalizacao']
    
    if data_finalizacao:
        resumo_data.append(['Data de Finaliza√ß√£o', data_finalizacao.strftime('%d/%m/%Y')])
    
    resumo_table = Table(resumo_data, colWidths=[3*inch, 2*inch])
    resumo_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(resumo_table)
    story.append(Spacer(1, 20))
    
    # Detalhamento por assessment
    for assessment in estatisticas_assessments:
        story.append(Paragraph(f"ASSESSMENT: {assessment['tipo'].nome}", heading_style))
        story.append(Paragraph(f"{assessment['versao_info']} - Score: {assessment['score_geral']}/5.0", subheading_style))
        
        # Buscar dom√≠nios e suas estat√≠sticas
        if projeto.assessments[0].versao_assessment_id:
            versao = projeto.assessments[0].versao_assessment
            dominios_query = AssessmentDominio.query.filter_by(versao_id=versao.id, ativo=True)
        else:
            dominios_query = Dominio.query.filter_by(tipo_assessment_id=assessment['tipo'].id, ativo=True)
        
        dominios_data = [['Dom√≠nio', 'Score', 'N√≠vel de Maturidade']]
        
        for dominio in dominios_query.order_by('ordem'):
            if projeto.assessments[0].versao_assessment_id:
                dominio_score_query = db.session.query(
                    func.avg(Resposta.nota).label('score_medio')
                ).join(
                    Pergunta, Resposta.pergunta_id == Pergunta.id
                ).filter(
                    Resposta.projeto_id == projeto.id,
                    Pergunta.dominio_versao_id == dominio.id,
                    Pergunta.ativo == True
                ).first()
            else:
                dominio_score_query = db.session.query(
                    func.avg(Resposta.nota).label('score_medio')
                ).join(
                    Pergunta, Resposta.pergunta_id == Pergunta.id
                ).filter(
                    Resposta.projeto_id == projeto.id,
                    Pergunta.dominio_id == dominio.id,
                    Pergunta.ativo == True
                ).first()
            
            dominio_score = round(float(dominio_score_query.score_medio or 0), 2)
            
            # Determinar n√≠vel de maturidade
            if dominio_score >= 4.5:
                nivel_maturidade = "Otimizado"
            elif dominio_score >= 3.5:
                nivel_maturidade = "Avan√ßado"
            elif dominio_score >= 2.5:
                nivel_maturidade = "Intermedi√°rio"
            elif dominio_score >= 1.5:
                nivel_maturidade = "B√°sico"
            elif dominio_score >= 0.5:
                nivel_maturidade = "Inicial"
            else:
                nivel_maturidade = "Inexistente"
            
            dominios_data.append([
                dominio.nome,
                f'{dominio_score}/5.0',
                nivel_maturidade
            ])
        
        dominios_table = Table(dominios_data, colWidths=[3*inch, 1*inch, 1.5*inch])
        dominios_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(dominios_table)
        story.append(Spacer(1, 20))
    
    # Memorial de respostas
    story.append(PageBreak())
    story.append(Paragraph("MEMORIAL DE RESPOSTAS E COMENT√ÅRIOS", heading_style))
    
    # Coletar memorial de respostas
    for projeto_assessment in projeto.assessments:
        if not projeto_assessment.finalizado:
            continue
            
        # Determinar tipo e vers√£o do assessment
        tipo = None
        if projeto_assessment.versao_assessment_id:
            versao = projeto_assessment.versao_assessment
            tipo = versao.tipo
            dominios_query = AssessmentDominio.query.filter_by(versao_id=versao.id, ativo=True)
        elif projeto_assessment.tipo_assessment_id:
            tipo = projeto_assessment.tipo_assessment
            dominios_query = Dominio.query.filter_by(tipo_assessment_id=tipo.id, ativo=True)
        
        if not tipo:
            continue
        
        story.append(Paragraph(f"Assessment: {tipo.nome}", subheading_style))
        
        for dominio in dominios_query.order_by('ordem'):
            story.append(Paragraph(f"Dom√≠nio: {dominio.nome}", subheading_style))
            
            # Coletar perguntas e respostas do dom√≠nio
            if projeto_assessment.versao_assessment_id:
                perguntas_dominio = Pergunta.query.filter_by(
                    dominio_versao_id=dominio.id,
                    ativo=True
                ).order_by(Pergunta.ordem).all()
            else:
                perguntas_dominio = Pergunta.query.filter_by(
                    dominio_id=dominio.id,
                    ativo=True
                ).order_by(Pergunta.ordem).all()
            
            for pergunta in perguntas_dominio:
                # Buscar resposta mais recente desta pergunta no projeto
                resposta = Resposta.query.filter_by(
                    projeto_id=projeto.id,
                    pergunta_id=pergunta.id
                ).order_by(Resposta.data_resposta.desc()).first()
                
                if resposta:
                    story.append(Paragraph(f"<b>Pergunta:</b> {pergunta.texto}", normal_style))
                    story.append(Paragraph(f"<b>Nota:</b> {resposta.nota}/5", normal_style))
                    
                    if resposta.comentario:
                        story.append(Paragraph(f"<b>Coment√°rio:</b> {resposta.comentario}", normal_style))
                    else:
                        story.append(Paragraph("<b>Coment√°rio:</b> Nenhum coment√°rio fornecido", normal_style))
                    
                    respondente_nome = resposta.respondente.nome if resposta.respondente else 'Sistema'
                    data_resposta = resposta.data_resposta.strftime('%d/%m/%Y √†s %H:%M')
                    story.append(Paragraph(f"<b>Respondente:</b> {respondente_nome} - {data_resposta}", normal_style))
                    story.append(Spacer(1, 10))
            
            story.append(Spacer(1, 15))
    
    # CTA de Contato
    story.append(PageBreak())
    
    # Buscar tipo de assessment do projeto para pegar o CTA personalizado
    tipo_assessment = None
    for projeto_assessment in projeto.assessments:
        if projeto_assessment.versao_assessment_id:
            tipo_assessment = projeto_assessment.versao_assessment.tipo
            break
        elif projeto_assessment.tipo_assessment_id:
            tipo_assessment = projeto_assessment.tipo_assessment
            break
    
    # Criar um box de destaque para o CTA
    cta_style = ParagraphStyle(
        'CTAStyle',
        parent=normal_style,
        fontSize=12,
        textColor=colors.HexColor('#0f4c75'),
        alignment=TA_CENTER,
        spaceAfter=10,
        leading=18
    )
    
    cta_title_style = ParagraphStyle(
        'CTATitleStyle',
        parent=heading_style,
        fontSize=18,
        textColor=colors.HexColor('#4CAF50'),
        alignment=TA_CENTER,
        spaceAfter=15
    )
    
    # Usar CTA personalizado se existir, sen√£o usar padr√£o
    if tipo_assessment and tipo_assessment.cta_texto:
        # CTA personalizado - usar pre-line para manter quebras de linha
        cta_paragrafos = tipo_assessment.cta_texto.strip().split('\n')
        for paragrafo in cta_paragrafos:
            if paragrafo.strip():
                story.append(Paragraph(paragrafo, cta_style))
    else:
        # CTA padr√£o
        story.append(Paragraph("QUER MELHORAR SEUS RESULTADOS?", cta_title_style))
        cta_text = """
        A <b>Gruppen</b> e suas empresas especializadas podem ajudar voc√™ a evoluir 
        nos controles deste assessment. Entre em contato conosco agora mesmo!
        """
        story.append(Paragraph(cta_text, cta_style))
    
    story.append(Spacer(1, 15))
    
    # Dados de contato em tabela
    contato_data = [
        ['Canal', 'Contato'],
        ['WhatsApp', '(51) 98968-3228'],
        ['E-mail', 'comercial@gruppen.com.br'],
        ['Website', 'www.gruppen.com.br']
    ]
    
    contato_table = Table(contato_data, colWidths=[2*inch, 4*inch])
    contato_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4CAF50')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#e8f5e9')),
        ('FONTSIZE', (0, 1), (-1, -1), 11),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#4CAF50')),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('TOPPADDING', (0, 1), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 1), (-1, -1), 10)
    ]))
    
    story.append(contato_table)
    story.append(Spacer(1, 30))
    
    # Legenda de n√≠veis de maturidade
    story.append(PageBreak())
    story.append(Paragraph("LEGENDA - N√çVEIS DE MATURIDADE", heading_style))
    
    legenda_data = [
        ['Faixa de Score', 'N√≠vel', 'Descri√ß√£o'],
        ['0.0 - 0.5', 'Inexistente', 'Nenhum controle implementado'],
        ['0.5 - 1.5', 'Inicial', 'Pr√°ticas informais e n√£o documentadas'],
        ['1.5 - 2.5', 'B√°sico', 'Controles definidos, aplica√ß√£o inconsistente'],
        ['2.5 - 3.5', 'Intermedi√°rio', 'Controles padronizados e repet√≠veis'],
        ['3.5 - 4.5', 'Avan√ßado', 'Controles monitorados com m√©tricas'],
        ['4.5 - 5.0', 'Otimizado', 'Controles integrados e melhorados continuamente']
    ]
    
    legenda_table = Table(legenda_data, colWidths=[1.2*inch, 1.5*inch, 3.3*inch])
    legenda_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(legenda_table)
    
    # Construir documento
    doc.build(story)
    
    return temp_filename

def allowed_file(filename, allowed_extensions):
    """Verifica se a extens√£o do arquivo √© permitida"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in allowed_extensions