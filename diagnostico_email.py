#!/usr/bin/env python3
"""
Script de diagn√≥stico para sistema de e-mail
Verifica configura√ß√µes SMTP, destinat√°rios e testa envio
"""

import sys
import os

# Adicionar diret√≥rio do projeto ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models.parametro_sistema import ParametroSistema
from models.assessment_version import AssessmentTipo
from models.leads import Lead
from utils.email_utils import EmailSender, enviar_alerta_novo_lead

def print_header(title):
    print("\n" + "=" * 60)
    print(f"  {title}")
    print("=" * 60)

def print_status(label, value, ok=True):
    status = "‚úì" if ok else "‚úó"
    color = "\033[92m" if ok else "\033[91m"
    reset = "\033[0m"
    print(f"{color}{status}{reset} {label}: {value}")

def diagnosticar():
    with app.app_context():
        print("\nüîç DIAGN√ìSTICO DO SISTEMA DE E-MAIL")
        
        # 1. Verificar configura√ß√µes SMTP
        print_header("1. CONFIGURA√á√ïES SMTP")
        
        config = ParametroSistema.get_smtp_config()
        
        if not config:
            print_status("Configura√ß√µes SMTP", "N√ÉO ENCONTRADAS", False)
            print("\n‚ùå Configure o SMTP em: /admin/parametros/smtp")
            return
        
        print_status("Servidor SMTP", config.get('smtp_server', 'N√ÉO CONFIGURADO'))
        print_status("Porta", config.get('smtp_port', 'N√ÉO CONFIGURADA'))
        print_status("Tipo de Autentica√ß√£o", config.get('smtp_auth_type', 'N√ÉO CONFIGURADA'))
        print_status("E-mail Remetente", config.get('smtp_from_email', 'N√ÉO CONFIGURADO'))
        print_status("Nome Remetente", config.get('smtp_from_name', 'N√ÉO CONFIGURADO'))
        
        # Verificar campos espec√≠ficos por tipo de auth
        auth_type = config.get('smtp_auth_type')
        
        if auth_type == 'basic':
            user_ok = bool(config.get('smtp_user'))
            pass_ok = bool(config.get('smtp_password'))
            print_status("Usu√°rio SMTP", "Configurado" if user_ok else "N√ÉO CONFIGURADO", user_ok)
            print_status("Senha SMTP", "Configurada" if pass_ok else "N√ÉO CONFIGURADA", pass_ok)
        elif auth_type == 'oauth2':
            client_id_ok = bool(config.get('smtp_client_id'))
            secret_ok = bool(config.get('smtp_client_secret'))
            token_ok = bool(config.get('smtp_refresh_token'))
            tenant_ok = bool(config.get('smtp_tenant_id'))
            print_status("Client ID", "Configurado" if client_id_ok else "N√ÉO CONFIGURADO", client_id_ok)
            print_status("Client Secret", "Configurado" if secret_ok else "N√ÉO CONFIGURADO", secret_ok)
            print_status("Refresh Token", "Configurado" if token_ok else "N√ÉO CONFIGURADO", token_ok)
            print_status("Tenant ID", "Configurado" if tenant_ok else "N√ÉO CONFIGURADO", tenant_ok)
        
        # 2. Verificar tipos de assessment com destinat√°rios
        print_header("2. TIPOS DE ASSESSMENT COM NOTIFICA√á√ÉO")
        
        tipos = AssessmentTipo.query.filter(AssessmentTipo.url_publica == True).all()
        
        if not tipos:
            print_status("Assessments com URL p√∫blica", "NENHUM ENCONTRADO", False)
            print("\n‚ùå Configure assessments com URL p√∫blica ativada")
            return
        
        tipos_com_email = []
        for tipo in tipos:
            if tipo.email_destinatarios:
                emails = [e.strip() for e in tipo.email_destinatarios.replace(';', ',').split(',') if e.strip()]
                print_status(f"Assessment: {tipo.nome}", f"{len(emails)} destinat√°rio(s)", True)
                for email in emails:
                    print(f"    ‚Üí {email}")
                tipos_com_email.append(tipo)
            else:
                print_status(f"Assessment: {tipo.nome}", "SEM DESTINAT√ÅRIOS", False)
        
        if not tipos_com_email:
            print("\n‚ö†Ô∏è  Nenhum assessment tem destinat√°rios configurados!")
            print("   Configure em: Assessments ‚Üí Editar Tipo ‚Üí E-mails para Notifica√ß√£o")
            return
        
        # 3. Verificar leads criados
        print_header("3. LEADS CRIADOS RECENTEMENTE")
        
        leads_recentes = Lead.query.order_by(Lead.data_criacao.desc()).limit(5).all()
        
        if not leads_recentes:
            print_status("Leads encontrados", "NENHUM", False)
            print("\n‚ö†Ô∏è  Nenhum lead foi criado ainda")
            print("   Teste respondendo um assessment p√∫blico")
        else:
            print_status("Leads encontrados", len(leads_recentes), True)
            for lead in leads_recentes:
                print(f"\n  Lead #{lead.id}:")
                print(f"    Nome: {lead.nome}")
                print(f"    E-mail: {lead.email}")
                print(f"    Assessment: {lead.tipo_assessment.nome if lead.tipo_assessment else 'N/A'}")
                print(f"    Data: {lead.data_criacao}")
                
                # Verificar se tem destinat√°rios
                if lead.tipo_assessment and lead.tipo_assessment.email_destinatarios:
                    print(f"    ‚úì Tipo tem destinat√°rios configurados")
                else:
                    print(f"    ‚úó Tipo N√ÉO tem destinat√°rios configurados")
        
        # 4. Teste de envio
        print_header("4. TESTE DE ENVIO")
        
        email_teste = input("\nüìß Digite um e-mail para teste (Enter para pular): ").strip()
        
        if email_teste:
            print(f"\nüì§ Enviando e-mail de teste para {email_teste}...")
            
            sender = EmailSender()
            
            corpo_html = """
            <html>
            <body style="font-family: Arial, sans-serif;">
                <h2 style="color: #6366f1;">üß™ E-mail de Teste</h2>
                <p>Este √© um e-mail de teste do sistema de notifica√ß√µes.</p>
                <p>Se voc√™ recebeu esta mensagem, o sistema est√° configurado corretamente!</p>
                <hr>
                <p style="color: #666; font-size: 12px;">
                    Enviado pelo script de diagn√≥stico
                </p>
            </body>
            </html>
            """
            
            try:
                resultado = sender.enviar_email(
                    destinatarios=[email_teste],
                    assunto="üß™ Teste - Sistema de E-mail Assessments",
                    corpo_html=corpo_html,
                    corpo_texto="Este √© um e-mail de teste. Se voc√™ recebeu, est√° funcionando!"
                )
                
                if resultado:
                    print_status("Envio de teste", "SUCESSO ‚úì", True)
                    print(f"\n‚úâÔ∏è  Verifique a caixa de entrada de {email_teste}")
                    print("   (Pode estar em spam/lixo eletr√¥nico)")
                else:
                    print_status("Envio de teste", "FALHOU ‚úó", False)
                    print("\n‚ùå Verifique os logs para mais detalhes")
                    
            except Exception as e:
                print_status("Envio de teste", f"ERRO: {str(e)}", False)
        
        # 5. Recomenda√ß√µes
        print_header("5. RECOMENDA√á√ïES")
        
        problemas = []
        
        if not config.get('smtp_server'):
            problemas.append("Configure o servidor SMTP em /admin/parametros/smtp")
        
        if not tipos_com_email:
            problemas.append("Configure destinat√°rios nos tipos de assessment")
        
        if not problemas:
            print("\n‚úÖ Configura√ß√£o parece correta!")
            print("\nPr√≥ximos passos:")
            print("1. Responda um assessment p√∫blico completo")
            print("2. Verifique a caixa de entrada dos destinat√°rios")
            print("3. Verifique a pasta de spam/lixo eletr√¥nico")
            print("4. Verifique os logs: sudo supervisorctl tail -f assessment stdout")
        else:
            print("\n‚ö†Ô∏è  Problemas encontrados:")
            for i, problema in enumerate(problemas, 1):
                print(f"{i}. {problema}")

if __name__ == "__main__":
    try:
        diagnosticar()
    except Exception as e:
        print(f"\n‚ùå ERRO: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    print()
