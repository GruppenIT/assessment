#!/bin/bash
#
# Script de Deploy - Fluxo Sem Atrito para Assessments P√∫blicos
# 
# Este script atualiza o sistema para o novo fluxo onde:
# - Resultados s√£o mostrados IMEDIATAMENTE ap√≥s responder
# - Lead √© criado SOMENTE quando usu√°rio solicita envio por email
# - Apenas email √© obrigat√≥rio para receber resultado
#
# IMPORTANTE: Este script PRESERVA todos os dados existentes
#

set -e  # Para execu√ß√£o em caso de erro

echo "=================================================="
echo "Deploy - Fluxo Sem Atrito (Assessments P√∫blicos)"
echo "=================================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

# 0. Carregar vari√°veis de ambiente
log_info "Carregando vari√°veis de ambiente..."
if [ -f ".env" ]; then
    log_info "Arquivo .env encontrado, carregando..."
    export $(cat .env | grep -v '^#' | xargs)
    log_info "Vari√°veis de ambiente carregadas"
else
    log_warn "Arquivo .env n√£o encontrado"
fi

# 1. Verificar se estamos no diret√≥rio correto
log_info "Verificando diret√≥rio do projeto..."
log_info "Diret√≥rio atual: $(pwd)"

# Verificar se pelo menos um dos arquivos/diret√≥rios do projeto existe
if [ -d "routes" ] || [ -d "templates" ] || [ -d "models" ] || [ -f "app.py" ] || [ -f "main.py" ]; then
    log_info "‚úì Diret√≥rio do projeto verificado"
else
    log_error "Este script deve ser executado no diret√≥rio raiz do projeto!"
    log_error "Certifique-se de estar em: /var/www/assessment"
    log_error "Conte√∫do atual do diret√≥rio:"
    ls -la
    exit 1
fi

# 2. Fazer backup do banco de dados
log_info "Criando backup do banco de dados..."
BACKUP_DIR="backups"
mkdir -p "$BACKUP_DIR"
BACKUP_FILE="$BACKUP_DIR/backup_antes_fluxo_sem_atrito_$(date +%Y%m%d_%H%M%S).sql"

if [ -n "$PGDATABASE" ]; then
    pg_dump -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" > "$BACKUP_FILE"
    log_info "Backup criado: $BACKUP_FILE"
else
    log_warn "Vari√°veis de ambiente PostgreSQL n√£o encontradas. Pulando backup."
fi

# 3. Atualizar c√≥digo do Git
log_info "Atualizando c√≥digo do reposit√≥rio Git..."
if [ -d ".git" ]; then
    git fetch origin
    git pull origin main || git pull origin master
    log_info "C√≥digo atualizado com sucesso"
else
    log_warn "Diret√≥rio .git n√£o encontrado. Pulando atualiza√ß√£o do Git."
fi

# 4. Aplicar migra√ß√µes do banco de dados
log_info "Aplicando migra√ß√µes do banco de dados..."

# Migra√ß√£o: Tornar campos nome e empresa opcionais na tabela leads
MIGRATION_SQL="
-- Migra√ß√£o: Permitir NULL em campos de lead (exceto email)
-- Necess√°rio para o novo fluxo sem atrito onde apenas email √© obrigat√≥rio

ALTER TABLE leads 
ALTER COLUMN nome DROP NOT NULL;

ALTER TABLE leads 
ALTER COLUMN empresa DROP NOT NULL;
"

# Aplicar migra√ß√£o
if [ -n "$DATABASE_URL" ]; then
    log_info "Usando DATABASE_URL para conex√£o..."
    echo "$MIGRATION_SQL" | psql "$DATABASE_URL"
    log_info "Migra√ß√µes aplicadas com sucesso"
elif [ -n "$PGDATABASE" ]; then
    log_info "Usando vari√°veis PG* para conex√£o..."
    PGPASSWORD="$PGPASSWORD" psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" <<EOF
$MIGRATION_SQL
EOF
    log_info "Migra√ß√µes aplicadas com sucesso"
else
    log_error "Vari√°veis de conex√£o ao banco n√£o encontradas!"
    log_error "Configure DATABASE_URL ou PGDATABASE/PGHOST/PGUSER/PGPASSWORD"
    log_warn "Execute manualmente as seguintes migra√ß√µes:"
    echo "$MIGRATION_SQL"
    log_warn "Continuando sem aplicar migra√ß√µes..."
fi

# 5. Verificar estrutura da tabela
log_info "Verificando estrutura da tabela leads..."
if [ -n "$DATABASE_URL" ]; then
    psql "$DATABASE_URL" -c "\d leads" > /dev/null 2>&1 && log_info "Tabela leads verificada"
elif [ -n "$PGDATABASE" ]; then
    PGPASSWORD="$PGPASSWORD" psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -c "\d leads" > /dev/null 2>&1 && log_info "Tabela leads verificada"
fi

# 6. Reiniciar aplica√ß√£o
log_info "Reiniciando aplica√ß√£o..."

# Tentar com Supervisor
if command -v supervisorctl &> /dev/null; then
    log_info "Reiniciando via Supervisor..."
    sudo supervisorctl restart assessments || log_warn "N√£o foi poss√≠vel reiniciar via Supervisor"
fi

# Tentar com Systemd
if command -v systemctl &> /dev/null; then
    log_info "Reiniciando via Systemd..."
    sudo systemctl restart assessments.service || log_warn "N√£o foi poss√≠vel reiniciar via Systemd"
fi

# Se nenhum dos acima funcionar, avisar
if ! command -v supervisorctl &> /dev/null && ! command -v systemctl &> /dev/null; then
    log_warn "Sistema de gerenciamento de servi√ßos n√£o detectado."
    log_warn "Reinicie manualmente a aplica√ß√£o Flask."
fi

# 7. Resumo
echo ""
echo "=================================================="
log_info "Deploy conclu√≠do com sucesso!"
echo "=================================================="
echo ""
echo "üìã Resumo das altera√ß√µes:"
echo "  ‚úÖ C√≥digo atualizado do Git"
echo "  ‚úÖ Migra√ß√µes aplicadas (leads.nome e leads.empresa agora opcionais)"
echo "  ‚úÖ Backup criado: $BACKUP_FILE"
echo "  ‚úÖ Aplica√ß√£o reiniciada"
echo ""
echo "üéØ Novo fluxo implementado:"
echo "  1. Usu√°rio responde assessment p√∫blico"
echo "  2. Resultado mostrado IMEDIATAMENTE (sem formul√°rio)"
echo "  3. Modal permite solicitar envio por email (apenas email)"
echo "  4. Lead criado SOMENTE quando solicita envio"
echo ""
echo "üìß Configura√ß√£o de Email:"
echo "  - Verifique configura√ß√µes SMTP em /admin/parametros/smtp"
echo "  - Configure destinat√°rios em cada tipo de assessment"
echo ""
log_info "Sistema atualizado e pronto para uso!"
echo ""
