#!/usr/bin/env python3
"""
Script para limpar considera√ß√µes finais de um projeto espec√≠fico
"""

import sys
import env_loader

def listar_projetos():
    """Lista todos os projetos dispon√≠veis"""
    
    try:
        from app import create_app
        from models.projeto import Projeto
        
        app = create_app()
        with app.app_context():
            projetos = Projeto.query.order_by(Projeto.data_criacao.desc()).all()
            
            if not projetos:
                print("‚ùå Nenhum projeto encontrado no sistema")
                return []
            
            print("üìã Projetos dispon√≠veis:")
            print("-" * 80)
            for projeto in projetos:
                cliente_nome = projeto.cliente.razao_social if projeto.cliente else "Cliente n√£o encontrado"
                tem_consideracoes = "‚úÖ" if projeto.consideracoes_finais_ia else "‚ùå"
                
                print(f"ID: {projeto.id:3d} | {projeto.nome:30s} | Cliente: {cliente_nome:20s} | Considera√ß√µes: {tem_consideracoes}")
            
            print("-" * 80)
            return projetos
            
    except Exception as e:
        print(f"‚ùå Erro ao listar projetos: {e}")
        return []

def limpar_consideracoes_projeto(projeto_id):
    """Limpa as considera√ß√µes finais de um projeto espec√≠fico"""
    
    try:
        from app import create_app, db
        from models.projeto import Projeto
        
        app = create_app()
        with app.app_context():
            projeto = Projeto.query.get(projeto_id)
            
            if not projeto:
                print(f"‚ùå Projeto com ID {projeto_id} n√£o encontrado")
                return False
            
            print(f"üìã Projeto selecionado:")
            print(f"   ID: {projeto.id}")
            print(f"   Nome: {projeto.nome}")
            print(f"   Cliente: {projeto.cliente.razao_social if projeto.cliente else 'N/A'}")
            
            # Verificar se tem considera√ß√µes
            if not projeto.consideracoes_finais_ia:
                print("‚ö†Ô∏è Este projeto n√£o possui considera√ß√µes finais para limpar")
                return True
            
            print(f"   Considera√ß√µes atuais: {len(projeto.consideracoes_finais_ia)} caracteres")
            print()
            
            # Confirmar opera√ß√£o
            resposta = input("Confirma a limpeza das considera√ß√µes finais? (s/N): ").lower().strip()
            if resposta != 's':
                print("Opera√ß√£o cancelada")
                return False
            
            # Limpar considera√ß√µes
            projeto.consideracoes_finais_ia = None
            
            try:
                db.session.commit()
                print("‚úÖ Considera√ß√µes finais removidas com sucesso!")
                print("üìù O bot√£o 'Gerar Considera√ß√µes Finais' voltar√° a aparecer na interface")
                return True
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå Erro ao salvar no banco: {e}")
                return False
            
    except Exception as e:
        print(f"‚ùå Erro ao limpar considera√ß√µes: {e}")
        return False

def limpar_analises_dominios_projeto(projeto_id):
    """Limpa tamb√©m as an√°lises dos dom√≠nios (opcional)"""
    
    try:
        from app import create_app, db
        from models.projeto import Projeto
        
        app = create_app()
        with app.app_context():
            projeto = Projeto.query.get(projeto_id)
            
            if not projeto:
                return False
            
            # Verificar se tem an√°lises de dom√≠nios
            if not projeto.analises_dominios_ia:
                print("‚ö†Ô∏è Este projeto n√£o possui an√°lises de dom√≠nios para limpar")
                return True
            
            print(f"üìä Encontradas an√°lises de dom√≠nios: {len(projeto.analises_dominios_ia)} caracteres")
            
            resposta = input("Deseja limpar tamb√©m as an√°lises dos dom√≠nios? (s/N): ").lower().strip()
            if resposta != 's':
                return True
            
            # Limpar an√°lises
            projeto.analises_dominios_ia = None
            
            try:
                db.session.commit()
                print("‚úÖ An√°lises dos dom√≠nios tamb√©m removidas!")
                return True
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå Erro ao limpar an√°lises: {e}")
                return False
            
    except Exception as e:
        print(f"‚ùå Erro ao limpar an√°lises dos dom√≠nios: {e}")
        return False

def metodo_sql_direto():
    """Mostra como fazer via SQL direto"""
    
    print()
    print("=" * 80)
    print("üîß M√âTODO ALTERNATIVO: SQL DIRETO")
    print("=" * 80)
    print()
    print("Se preferir usar SQL diretamente no PostgreSQL:")
    print()
    print("1. Conectar ao banco:")
    print("   psql -h localhost -U assessment_user assessment_db")
    print()
    print("2. Listar projetos:")
    print("   SELECT id, nome, cliente_id, ")
    print("          CASE WHEN consideracoes_finais_ia IS NOT NULL THEN 'SIM' ELSE 'N√ÉO' END as tem_consideracoes")
    print("   FROM projetos ORDER BY data_criacao DESC;")
    print()
    print("3. Limpar considera√ß√µes de um projeto espec√≠fico (substitua X pelo ID):")
    print("   UPDATE projetos SET consideracoes_finais_ia = NULL WHERE id = X;")
    print()
    print("4. Opcional - Limpar tamb√©m an√°lises de dom√≠nios:")
    print("   UPDATE projetos SET analises_dominios_ia = NULL WHERE id = X;")
    print()
    print("5. Verificar resultado:")
    print("   SELECT id, nome, ")
    print("          CASE WHEN consideracoes_finais_ia IS NOT NULL THEN 'SIM' ELSE 'N√ÉO' END as tem_consideracoes")
    print("   FROM projetos WHERE id = X;")
    print("=" * 80)

def main():
    """Fun√ß√£o principal"""
    
    print("=" * 80)
    print("üóëÔ∏è LIMPEZA DE CONSIDERA√á√ïES FINAIS - PROJETO ESPEC√çFICO")
    print("=" * 80)
    print()
    
    # Mostrar op√ß√µes
    print("Escolha uma op√ß√£o:")
    print("1. Script automatizado (recomendado)")
    print("2. Comandos SQL diretos")
    print()
    
    opcao = input("Digite sua escolha (1 ou 2): ").strip()
    
    if opcao == "2":
        metodo_sql_direto()
        return 0
    elif opcao != "1":
        print("‚ùå Op√ß√£o inv√°lida")
        return 1
    
    # Listar projetos
    projetos = listar_projetos()
    if not projetos:
        return 1
    
    print()
    
    # Solicitar ID do projeto
    try:
        projeto_id = input("Digite o ID do projeto para limpar considera√ß√µes finais: ").strip()
        projeto_id = int(projeto_id)
    except ValueError:
        print("‚ùå ID inv√°lido. Digite apenas n√∫meros.")
        return 1
    
    print()
    
    # Limpar considera√ß√µes finais
    if not limpar_consideracoes_projeto(projeto_id):
        return 1
    
    print()
    
    # Op√ß√£o de limpar an√°lises de dom√≠nios tamb√©m
    limpar_analises_dominios_projeto(projeto_id)
    
    print()
    print("=" * 80)
    print("üéâ OPERA√á√ÉO CONCLU√çDA!")
    print("=" * 80)
    print("üìù Acesse a interface do projeto para:")
    print("   1. Gerar novamente as an√°lises dos dom√≠nios (se necess√°rio)")
    print("   2. Gerar novas considera√ß√µes finais")
    print("   3. O bot√£o 'Gerar Considera√ß√µes Finais' estar√° vis√≠vel novamente")
    print("=" * 80)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())