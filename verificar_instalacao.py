#!/usr/bin/env python3
"""
Script para verificar se a instala√ß√£o do sistema est√° funcionando corretamente
Testa conectividade, banco de dados, permiss√µes e funcionalidades principais
"""

import os
import sys
import psycopg2
import subprocess
from datetime import datetime
from urllib.parse import urlparse

# Carregar vari√°veis de ambiente
import env_loader

def verificar_sistema_operacional():
    """Verificar sistema operacional e depend√™ncias"""
    
    print("üñ•Ô∏è Verificando sistema operacional...")
    
    try:
        # Verificar Ubuntu
        with open('/etc/os-release', 'r') as f:
            os_info = f.read()
            if 'Ubuntu' not in os_info:
                print("‚ö†Ô∏è Sistema n√£o √© Ubuntu (pode funcionar mas n√£o testado)")
            else:
                print("‚úÖ Ubuntu detectado")
        
        # Verificar servi√ßos essenciais
        servicos = ['postgresql', 'nginx', 'supervisor']
        for servico in servicos:
            try:
                result = subprocess.run(['systemctl', 'is-active', servico], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"‚úÖ {servico}: ativo")
                else:
                    print(f"‚ö†Ô∏è {servico}: inativo ou n√£o instalado")
            except:
                print(f"‚ùå N√£o foi poss√≠vel verificar {servico}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar sistema: {e}")
        return False

def verificar_variaveis_ambiente():
    """Verificar se as vari√°veis de ambiente est√£o configuradas"""
    
    print("üîß Verificando vari√°veis de ambiente...")
    
    variaveis_obrigatorias = [
        'DATABASE_URL',
        'SESSION_SECRET', 
        'FLASK_SECRET_KEY'
    ]
    
    variaveis_opcionais = [
        'FLASK_ENV',
        'TZ',
        'TIMEZONE',
        'OPENAI_API_KEY'
    ]
    
    sucesso = True
    
    for var in variaveis_obrigatorias:
        valor = os.environ.get(var)
        if valor:
            if 'SECRET' in var or 'PASSWORD' in var:
                print(f"‚úÖ {var}: configurada")
            elif 'DATABASE_URL' in var:
                if valor.startswith('postgresql'):
                    print(f"‚úÖ {var}: PostgreSQL configurado")
                else:
                    print(f"‚ùå {var}: deve ser PostgreSQL")
                    sucesso = False
            else:
                print(f"‚úÖ {var}: {valor}")
        else:
            print(f"‚ùå {var}: n√£o configurada")
            sucesso = False
    
    for var in variaveis_opcionais:
        valor = os.environ.get(var)
        if valor:
            if 'SECRET' in var or 'KEY' in var:
                print(f"‚úÖ {var}: configurada")
            else:
                print(f"‚úÖ {var}: {valor}")
        else:
            print(f"‚ö†Ô∏è {var}: n√£o configurada (opcional)")
    
    return sucesso

def verificar_banco_dados():
    """Verificar conectividade e estrutura do banco"""
    
    print("üóÑÔ∏è Verificando banco de dados...")
    
    try:
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL n√£o configurada")
            return False
            
        parsed = urlparse(database_url)
        
        # Testar conex√£o
        conn = psycopg2.connect(
            host=parsed.hostname,
            port=parsed.port or 5432,
            database=parsed.path.lstrip('/'),
            user=parsed.username,
            password=parsed.password
        )
        cursor = conn.cursor()
        
        # Verificar vers√£o
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        print(f"‚úÖ PostgreSQL conectado: {version[:50]}...")
        
        # Verificar tabelas principais
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """)
        tabelas = [row[0] for row in cursor.fetchall()]
        
        tabelas_esperadas = [
            'usuarios', 'clientes', 'respondentes', 'projetos',
            'assessment_tipos', 'assessment_versoes', 'assessment_dominios',
            'perguntas', 'respostas', 'auditoria', 'configuracoes'
        ]
        
        tabelas_encontradas = 0
        for tabela in tabelas_esperadas:
            if tabela in tabelas:
                tabelas_encontradas += 1
        
        print(f"‚úÖ Tabelas encontradas: {tabelas_encontradas}/{len(tabelas_esperadas)}")
        
        if tabelas_encontradas < len(tabelas_esperadas) * 0.8:  # Pelo menos 80%
            print("‚ö†Ô∏è Algumas tabelas principais podem estar faltando")
            print(f"   Tabelas no banco: {', '.join(tabelas)}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no banco de dados: {e}")
        return False

def verificar_aplicacao_flask():
    """Verificar se a aplica√ß√£o Flask carrega corretamente"""
    
    print("üåê Verificando aplica√ß√£o Flask...")
    
    try:
        from app import create_app, db
        
        app = create_app()
        
        with app.app_context():
            # Verificar configura√ß√£o
            db_uri = app.config.get('SQLALCHEMY_DATABASE_URI')
            print(f"‚úÖ Flask configurado com: {db_uri[:30]}...")
            
            # Testar query simples
            result = db.session.execute(db.text("SELECT 1")).fetchone()
            if result[0] == 1:
                print("‚úÖ Flask conectado ao banco com sucesso")
            
            # Verificar modelos
            from models.usuario import Usuario
            from models.configuracao import Configuracao
            
            admin_count = Usuario.query.count()
            config_count = Configuracao.query.count()
            
            print(f"‚úÖ Usu√°rios no sistema: {admin_count}")
            print(f"‚úÖ Configura√ß√µes no sistema: {config_count}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na aplica√ß√£o Flask: {e}")
        return False

def verificar_permissoes_arquivos():
    """Verificar permiss√µes de arquivos e diret√≥rios"""
    
    print("üìÅ Verificando permiss√µes de arquivos...")
    
    try:
        diretorio_app = '/var/www/assessment'
        
        if not os.path.exists(diretorio_app):
            print(f"‚ùå Diret√≥rio n√£o encontrado: {diretorio_app}")
            return False
        
        # Verificar se √© execut√°vel pelo usu√°rio atual
        if os.access(diretorio_app, os.R_OK):
            print("‚úÖ Diret√≥rio leg√≠vel")
        else:
            print("‚ùå Diret√≥rio n√£o leg√≠vel")
            return False
        
        # Verificar arquivos principais
        arquivos_principais = [
            'main.py', 'app.py', 'env_loader.py',
            '.env', 'requirements.txt'
        ]
        
        for arquivo in arquivos_principais:
            caminho = os.path.join(diretorio_app, arquivo)
            if os.path.exists(caminho):
                if os.access(caminho, os.R_OK):
                    print(f"‚úÖ {arquivo}: leg√≠vel")
                else:
                    print(f"‚ö†Ô∏è {arquivo}: sem permiss√£o de leitura")
            else:
                if arquivo == '.env':
                    print(f"‚ö†Ô∏è {arquivo}: n√£o encontrado (verifique localiza√ß√£o)")
                else:
                    print(f"‚ùå {arquivo}: n√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar permiss√µes: {e}")
        return False

def verificar_supervisor():
    """Verificar se o supervisor est√° configurado"""
    
    print("üëÅÔ∏è Verificando supervisor...")
    
    try:
        # Verificar arquivo de configura√ß√£o
        config_path = '/etc/supervisor/conf.d/assessment.conf'
        if os.path.exists(config_path):
            print("‚úÖ Arquivo de configura√ß√£o do supervisor encontrado")
            
            # Verificar status do processo
            try:
                result = subprocess.run(['supervisorctl', 'status', 'assessment'],
                                      capture_output=True, text=True)
                if 'RUNNING' in result.stdout:
                    print("‚úÖ Processo assessment est√° rodando")
                else:
                    print("‚ö†Ô∏è Processo assessment n√£o est√° rodando")
                    print(f"   Status: {result.stdout.strip()}")
            except:
                print("‚ö†Ô∏è N√£o foi poss√≠vel verificar status do supervisor")
        else:
            print("‚ùå Arquivo de configura√ß√£o do supervisor n√£o encontrado")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar supervisor: {e}")
        return False

def verificar_nginx():
    """Verificar configura√ß√£o do nginx"""
    
    print("üåê Verificando nginx...")
    
    try:
        # Verificar se nginx est√° rodando
        result = subprocess.run(['systemctl', 'is-active', 'nginx'],
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Nginx est√° ativo")
        else:
            print("‚ö†Ô∏è Nginx n√£o est√° ativo")
        
        # Verificar configura√ß√£o do site
        site_config = '/etc/nginx/sites-enabled/assessment'
        if os.path.exists(site_config):
            print("‚úÖ Configura√ß√£o do site encontrada")
        else:
            print("‚ö†Ô∏è Configura√ß√£o do site n√£o encontrada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar nginx: {e}")
        return False

def gerar_relatorio_final(resultados):
    """Gerar relat√≥rio final da verifica√ß√£o"""
    
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DA VERIFICA√á√ÉO")
    print("=" * 60)
    
    total_checks = len(resultados)
    checks_ok = sum(1 for result in resultados if result[1])
    
    print(f"‚úÖ Verifica√ß√µes bem-sucedidas: {checks_ok}/{total_checks}")
    print(f"‚ö†Ô∏è Verifica√ß√µes com problemas: {total_checks - checks_ok}/{total_checks}")
    
    print("\nüìã Detalhes:")
    for nome, sucesso in resultados:
        status = "‚úÖ" if sucesso else "‚ùå"
        print(f"   {status} {nome}")
    
    if checks_ok == total_checks:
        print("\nüéâ SISTEMA INSTALADO CORRETAMENTE!")
        print("üåê O sistema est√° pronto para uso")
    elif checks_ok >= total_checks * 0.8:  # 80% ou mais
        print("\n‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL")
        print("üìù Alguns itens precisam de aten√ß√£o, mas o sistema pode funcionar")
    else:
        print("\n‚ùå PROBLEMAS NA INSTALA√á√ÉO")
        print("üìù V√°rios itens precisam ser corrigidos")
    
    print("\nüìû Para suporte, consulte a documenta√ß√£o ou entre em contato")
    print("=" * 60)
    
    return checks_ok == total_checks

def main():
    """Fun√ß√£o principal de verifica√ß√£o"""
    
    print("=" * 60)
    print("üîç VERIFICA√á√ÉO DA INSTALA√á√ÉO DO SISTEMA")
    print("=" * 60)
    print(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # Lista de verifica√ß√µes
    verificacoes = [
        ("Sistema operacional", verificar_sistema_operacional),
        ("Vari√°veis de ambiente", verificar_variaveis_ambiente),
        ("Banco de dados", verificar_banco_dados),
        ("Aplica√ß√£o Flask", verificar_aplicacao_flask),
        ("Permiss√µes de arquivos", verificar_permissoes_arquivos),
        ("Supervisor", verificar_supervisor),
        ("Nginx", verificar_nginx)
    ]
    
    resultados = []
    
    for nome, funcao in verificacoes:
        print(f"üìã {nome}...")
        try:
            resultado = funcao()
            resultados.append((nome, resultado))
        except Exception as e:
            print(f"‚ùå Erro inesperado em {nome}: {e}")
            resultados.append((nome, False))
        print()
    
    # Gerar relat√≥rio final
    sucesso_total = gerar_relatorio_final(resultados)
    
    return 0 if sucesso_total else 1

if __name__ == "__main__":
    sys.exit(main())