#!/usr/bin/env python3
"""
Script para verificar se a instala√ß√£o est√° funcionando corretamente
"""

import os
import sys
import subprocess
import requests
import time

def verificar_supervisor():
    """Verifica se o Supervisor est√° funcionando"""
    try:
        result = subprocess.run(['sudo', 'supervisorctl', 'status', 'assessment'], 
                              capture_output=True, text=True)
        if 'RUNNING' in result.stdout:
            print("‚úÖ Supervisor: assessment est√° RUNNING")
            return True
        else:
            print(f"‚ùå Supervisor: {result.stdout.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar Supervisor: {e}")
        return False

def verificar_web():
    """Verifica se a aplica√ß√£o web est√° respondendo"""
    try:
        response = requests.get('http://localhost:8000', timeout=10)
        if response.status_code == 200:
            print("‚úÖ Web: Aplica√ß√£o respondendo na porta 8000")
            return True
        else:
            print(f"‚ùå Web: Status code {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Web: N√£o √© poss√≠vel conectar na porta 8000")
        return False
    except Exception as e:
        print(f"‚ùå Web: Erro {e}")
        return False

def verificar_logs():
    """Verifica se h√° erros nos logs"""
    try:
        # √öltimas 20 linhas do log
        result = subprocess.run(['sudo', 'tail', '-n', '20', '/var/log/assessment.log'], 
                              capture_output=True, text=True)
        
        logs = result.stdout
        
        # Verificar por erros cr√≠ticos
        erros_criticos = ['ERROR', 'CRITICAL', 'FATAL', 'Exception', 'Traceback']
        erros_encontrados = []
        
        for linha in logs.split('\n'):
            for erro in erros_criticos:
                if erro in linha:
                    erros_encontrados.append(linha.strip())
        
        if erros_encontrados:
            print("‚ö†Ô∏è  Logs: Erros encontrados:")
            for erro in erros_encontrados[:3]:  # M√°ximo 3 erros
                print(f"   {erro}")
        else:
            print("‚úÖ Logs: Sem erros cr√≠ticos nas √∫ltimas 20 linhas")
            
        return len(erros_encontrados) == 0
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar logs: {e}")
        return False

def verificar_banco():
    """Verifica se o banco est√° acess√≠vel"""
    try:
        # Verificar se PostgreSQL est√° rodando
        result = subprocess.run(['sudo', 'systemctl', 'is-active', 'postgresql'], 
                              capture_output=True, text=True)
        
        if 'active' in result.stdout:
            print("‚úÖ PostgreSQL: Servi√ßo ativo")
            return True
        else:
            print(f"‚ùå PostgreSQL: {result.stdout.strip()}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar PostgreSQL: {e}")
        return False

def main():
    """Executa todas as verifica√ß√µes"""
    
    print("üîç VERIFICA√á√ÉO COMPLETA DA INSTALA√á√ÉO")
    print("="*50)
    
    verificacoes = [
        ("Banco de Dados", verificar_banco),
        ("Supervisor", verificar_supervisor),
        ("Logs", verificar_logs),
        ("Aplica√ß√£o Web", verificar_web),
    ]
    
    resultados = []
    
    for nome, funcao in verificacoes:
        print(f"\nüìã Verificando {nome}...")
        resultado = funcao()
        resultados.append((nome, resultado))
        
        if not resultado and nome == "Aplica√ß√£o Web":
            print("   ‚è≥ Aguardando 5 segundos e tentando novamente...")
            time.sleep(5)
            resultado = funcao()
            resultados[-1] = (nome, resultado)
    
    print(f"\nüéØ RESUMO DA VERIFICA√á√ÉO")
    print("="*30)
    
    total_ok = 0
    for nome, ok in resultados:
        status = "‚úÖ" if ok else "‚ùå"
        print(f"{status} {nome}")
        if ok:
            total_ok += 1
    
    print(f"\nüìä Resultado: {total_ok}/{len(resultados)} verifica√ß√µes passaram")
    
    if total_ok == len(resultados):
        print("\nüéâ SISTEMA TOTALMENTE FUNCIONAL!")
        print("   Acesse: http://localhost:8000")
        print("   Ou: http://[IP_DO_SERVIDOR]:8000")
    else:
        print("\n‚ö†Ô∏è  Sistema com problemas.")
        print("   Verifique os itens marcados com ‚ùå")
        
    print(f"\nüìã COMANDOS √öTEIS:")
    print(f"   sudo supervisorctl status")
    print(f"   sudo tail -f /var/log/assessment.log")
    print(f"   sudo systemctl status postgresql")
    print(f"   curl -I http://localhost:8000")

if __name__ == "__main__":
    main()